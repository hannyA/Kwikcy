//
//  KCProfileVC.m
//  Quickpeck
//
//  Created by Hanny Aly on 4/2/14.
//  Copyright (c) 2014 Hanny Aly. All rights reserved.
//
#import "User+methods.h"
#import "QPCoreDataManager.h"
#import "Constants.h"

#import "BlockActionSheet.h"
#import "MBProgressHUD.h"
#import "QPNetworkActivity.h"

#import <AWSDynamoDB/AWSDynamoDB.h>
#import "AmazonKeyChainWrapper.h"
#import "AmazonClientManager.h"
#import "QPProfileMethods.h"


#import "KCProfileVC.h"

#import "QPProfileMethods.h"

@interface KCProfileVC ()

@property (nonatomic, strong) NSString *username;

@property (weak, nonatomic) IBOutlet UILabel *realname;

@property (nonatomic, strong) NSManagedObjectContext *managedObjectContext;

@property (weak, nonatomic) IBOutlet UIButton *profile_image;

//@property (weak, nonatomic) IBOutlet UIButton *controllerTitle;
@property (strong, nonatomic) MBProgressHUD *hud;

@property (weak, nonatomic) IBOutlet UILabel *followingCount;
@property (weak, nonatomic) IBOutlet UILabel *followersCount;

@property (weak, nonatomic) IBOutlet UILabel *trustValue;
@property (weak, nonatomic) IBOutlet UILabel *betrayedValue;
@property (weak, nonatomic) IBOutlet UILabel *avengeValue;

@end


@implementation KCProfileVC




- (void)viewDidLoad
{
    [super viewDidLoad];
    
    self.managedObjectContext = [QPCoreDataManager sharedInstance].managedObjectContext;
    
    self.username = [AmazonKeyChainWrapper username];
    
    [self.navigationItem setTitle:self.username];
    
    
    
    self.trustValue.text    = [NSString stringWithFormat:@"%d%%", 0];
    self.betrayedValue.text = [NSString stringWithFormat:@"%d%%", 0];
    self.avengeValue.text   = [NSString stringWithFormat:@"%d%%", 0];
    
    
    
    
    
    

    // Get my own data from server
    dispatch_async(dispatch_get_global_queue( DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{

        
        NSMutableDictionary *hashKey = [NSMutableDictionary dictionary];
        
        hashKey[USERNAME] = [[DynamoDBAttributeValue alloc] initWithS:self.username];
        
        DynamoDBGetItemRequest *request  = [[DynamoDBGetItemRequest alloc] init];
        request.tableName = USER_POINTS_TABLE;
        request.key = hashKey;
        
        [[QPNetworkActivity sharedInstance] increaseActivity];
        DynamoDBGetItemResponse *getItemResponse = [[AmazonClientManager ddb] getItem:request];
        [[QPNetworkActivity sharedInstance] decreaseActivity];
        

        if (!getItemResponse.error)
        {
            NSMutableDictionary *item = getItemResponse.item;
            NSMutableDictionary *userDetails = [NSMutableDictionary new];
            
            if (item)
            {
                
                NSString *numberOfSentPhotos = ((DynamoDBAttributeValue*)[item objectForKey:@"sentPhotos"]).n;
                NSString *numberOfReceivedPhotos = ((DynamoDBAttributeValue*)[item objectForKey:@"receivedPhotos"]).n;
                NSString *numberOfScreenShotsTaken = ((DynamoDBAttributeValue*)[item objectForKey:@"screenShotsTaken"]).n;
                NSString *numberOfScreenShotsTakenByOthers = ((DynamoDBAttributeValue*)[item objectForKey:@"screenShotsTakenByOthers"]).n;
                NSString *numberOfRevengePointsUsed = ((DynamoDBAttributeValue*)[item objectForKey:@"UsedRevengePoints"]).n;
                
                NSString *numberOfFollowers = ((DynamoDBAttributeValue*)[item objectForKey:NumberOfFollowers]).n;
                NSString *numberFollowing = ((DynamoDBAttributeValue*)[item objectForKey:NumberFollowing]).n;

                //                NSString *followingAllowed = ((DynamoDBAttributeValue*)[item objectForKey:@"followingAllowed"]).s;
                //                NSString *contactAllowed = ((DynamoDBAttributeValue*)[item objectForKey:@"contactAllowed"]).s;
                
                //error checking
                
                if (numberOfSentPhotos)
                    userDetails[NumberOfSentPhotos] = numberOfSentPhotos;
                if (numberOfReceivedPhotos)
                    userDetails[NumberOfReceivedPhotos] = numberOfReceivedPhotos;
                if (numberOfScreenShotsTaken)
                    userDetails[NumberOfScreenShotsTaken] = numberOfScreenShotsTaken;
                if (numberOfScreenShotsTakenByOthers)
                    userDetails[NumberOfScreenShotsTakenByOthers] = numberOfScreenShotsTakenByOthers;
                if (numberOfRevengePointsUsed)
                    userDetails[NumberOfRevengePointsUsed] = numberOfRevengePointsUsed;
                
                if (numberOfFollowers)
                    userDetails[NumberOfFollowers] = numberOfFollowers;
                
                if (numberFollowing)
                    userDetails[NumberFollowing] = numberFollowing;
                
                
                
                
                
                NSUInteger receivedPhotos = [numberOfReceivedPhotos integerValue];
                float screenshotsTakenByMe = [numberOfScreenShotsTaken floatValue];
                
                
                float trust = (receivedPhotos - screenshotsTakenByMe) / receivedPhotos  * 100 ;
                int trustInt  = [QPProfileMethods getPercentage:trust];
                
                
                self.trustValue.text = [NSString stringWithFormat:@"%d%%", trustInt];
                
                
                
                
                
                
                NSUInteger revengePointsIHave = [numberOfScreenShotsTakenByOthers integerValue];
                float revengePointsUsed = [numberOfRevengePointsUsed floatValue];
                
                
                float avenge = (revengePointsUsed / revengePointsIHave) * 100 ;
                int avengeInt  = [QPProfileMethods getPercentage:avenge];
                
            
                self.avengeValue.text = [NSString stringWithFormat:@"%d%%", avengeInt];
                
                
                
                
                
                NSUInteger screenShotsTakenByOthers = [numberOfScreenShotsTakenByOthers integerValue];
                float sentPhotos = [numberOfSentPhotos floatValue];
                
                float betray = screenShotsTakenByOthers / sentPhotos * 100;
                int betrayInt  = [QPProfileMethods getPercentage:betray];

                
                self.betrayedValue.text = [NSString stringWithFormat:@"%d%%", betrayInt];
                
                
                
                
                NSUInteger following = [QPProfileMethods getIntegerNumber:numberFollowing];
                NSUInteger followers = [QPProfileMethods getIntegerNumber:numberOfFollowers];
                
                
                self.followingCount.text = [NSString stringWithFormat:@"%lu", (unsigned long)following];
                self.followersCount.text = [NSString stringWithFormat:@"%lu", (unsigned long)followers];

                
            }
            
        }
        else
        {
            NSLog(@"error 4 : %@", getItemResponse.error);

        }
    });
    
    
    
    
}




-(void)viewWillAppear:(BOOL)animated
{
    NSLog(@"View will appear");
    [super viewWillAppear:YES];
    self.realname.text = @"";
     [self.profile_image setImage:[UIImage imageNamed:@"profile-replacement.png"] forState:UIControlStateNormal];

    if (self.managedObjectContext){
        
        [self.managedObjectContext performBlockAndWait:^{
            
            User *mySelf = [User getMyDataInManagedContext:self.managedObjectContext];
            
            if (mySelf)
            {
                if (mySelf.realname)
                    self.realname.text = mySelf.realname;
               
                
                if (mySelf.data)
                {
              
                    UIImage *image = [UIImage imageWithData:mySelf.data];
                    [self.profile_image setImage:image forState:UIControlStateNormal];
                }
            }
         }];
    }
//    else {
//        [self.profile_image setImage:[UIImage imageNamed:@"profile-replacement.png"] forState:UIControlStateNormal];
//    }
    NSLog(@"View will appear done");
    
}



-(void)showHUDWithMessage:(NSString *)message
{
    dispatch_async(dispatch_get_main_queue(), ^{
        self.hud = [MBProgressHUD getAndShowUniversalHUD:self.view withText:message animated:YES];
    });
}

-(void)showHUDWithMessageSynch:(NSString *)message
{
    self.hud = [MBProgressHUD getAndShowUniversalHUD:self.view withText:message animated:YES];
}





#define USERS_PROFILE_CONTROLLER @"KCProfileVC"

-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    if ([segue.identifier isEqual:@"Show Camera"])
    {
        [segue.destinationViewController performSelector:@selector(setParentController:) withObject:USERS_PROFILE_CONTROLLER];
    }
    else if ([segue.identifier isEqual:@"Show Edit Screen"])
    {
        
    }
    else if ([segue.identifier isEqual:@"Show Options Screen"])
    {
        
    }
    
}






- (IBAction)showBlockAlertForChangingProfilePicture:(UIButton *)sender
{
    NSLog(@"showBlockAlertForChangingProfilePicture");
    
    BlockActionSheet *alert = [BlockActionSheet sheetWithTitle:@"Change Profile Picture"];
    
    [alert setDestructiveButtonWithTitle:@"Remove current photo" block:^{
                            

        NSString *prefix = [Constants getPrefixForUsername:self.username];
        
        // key and range
        DynamoDBAttributeValue* hashValue = [[DynamoDBAttributeValue alloc] initWithS:prefix];
        DynamoDBAttributeValue* rangeValue = [[DynamoDBAttributeValue alloc] initWithS:self.username];
        
        
        // Setup all conditions
        NSMutableDictionary *key = [[NSMutableDictionary alloc] init];
        [key setObject:hashValue forKey:PREFIX];
        [key setObject:rangeValue forKey:USERNAME];
        
        
        NSMutableDictionary *userDic = [NSMutableDictionary new];
        
        
        DynamoDBAttributeValueUpdate *attributeValueUpdate = [DynamoDBAttributeValueUpdate new];
        attributeValueUpdate.action = @"DELETE";
        [userDic setValue:attributeValueUpdate forKey:IMAGE];
        
        
        DynamoDBUpdateItemRequest *updateItemRequest = [[DynamoDBUpdateItemRequest alloc] initWithTableName:QPUSERS_SEARCH_TABLE andKey:key andAttributeUpdates:userDic];
        
        
        [[QPNetworkActivity sharedInstance] increaseActivity];
        DynamoDBUpdateItemResponse *updateItemResponse = [[AmazonClientManager ddb] updateItem:updateItemRequest];
        [[QPNetworkActivity sharedInstance] decreaseActivity];

        if(!updateItemResponse.error)
        {
            NSLog(@"Remove image from core data");
            NSDictionary * userInfo = [NSDictionary dictionaryWithObjectsAndKeys: RemoveImage, ACTION, nil];
            BOOL removedImage = [User updateUserinfo:userInfo inManagedObjectContext:self.managedObjectContext];
            if (removedImage)
            {
                [self.profile_image setImage:nil forState:UIControlStateNormal];
            }
        }
    }];
    
    
    
    [alert addButtonWithTitle:@"Take Photo" block:^{
        [self performSegueWithIdentifier:@"Show Camera" sender:nil];
    }];
    
    
    
    
    [alert addButtonWithTitle:@"Choose from library" block:^{
        // Pop up  library
        
        UIImagePickerController* imagePickerController = [[UIImagePickerController alloc] init];
        imagePickerController.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;
        imagePickerController.delegate = self;
        imagePickerController.allowsEditing = NO;
        [self presentViewController:imagePickerController animated:YES completion:NULL];
    }];
    
    
    [alert setCancelButtonWithTitle:@"Do nothing"
                              block:^{
                              }
     ];
    
    
    //empty button
    [alert addButtonWithTitle:@"" block:^{}];
    [alert addButtonWithTitle:@"" block:^{}];
    
    
    [alert showInView:self.view];
}





//libary did select image
-(void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info
{
    UIImage* outputImage = [info objectForKey:UIImagePickerControllerEditedImage];
    if (!outputImage)
        outputImage = [info objectForKey:UIImagePickerControllerOriginalImage];
    
    [QPProfileMethods saveImage:outputImage forProfileUser:self.username];
    // saveImageForProfile:outputImage];
    
    
//    dispatch_async(dispatch_get_global_queue( DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{
//      
//        [[QPNetworkActivity sharedInstance] increaseActivity];
//        [self showHUDWithMessage:@"Saving"];
//        
//        [QPProfileMethods saveImageForProfile:outputImage];
//        
//        
//        [[QPNetworkActivity sharedInstance] decreaseActivity];
//        [self.hud hideProgressHUD];
//    });
}


// Library did cancel
-(void)imagePickerControllerDidCancel:(UIImagePickerController *)picker
{
    [self dismissViewControllerAnimated:YES completion:nil];
}






//
//-(void)saveImageForProfile:(UIImage *)image
//{
//    //Either upload data to s3 and then put link in dynamodb search users table
//    // Or just store binary data in dynamodb search table
//    dispatch_async(dispatch_get_global_queue( DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{
//        
//        [self showHUDWithMessage:@"Saving"];
//        
//        NSString *prefix = [Constants getPrefixForUsername:self.username];
//        
//        
//        // key and range
//        DynamoDBAttributeValue* hashValue = [[DynamoDBAttributeValue alloc] initWithS:prefix];
//        DynamoDBAttributeValue* rangeValue = [[DynamoDBAttributeValue alloc] initWithS:self.username];
//        
//        
//        // Setup all conditions
//        NSMutableDictionary *key = [[NSMutableDictionary alloc] init];
//        key[PREFIX] = hashValue;
//        key[USERNAME] = rangeValue;
//        
//        
//        DynamoDBUpdateItemRequest *updateItemRequest = [DynamoDBUpdateItemRequest new];
//        
////        CGFloat height = self.view.bounds.size.height;
////        CGFloat width  = self.view.bounds.size.width;
//        
//        CGFloat height = [UIScreen mainScreen].bounds.size.height;
//        CGFloat width  = [UIScreen mainScreen].bounds.size.height;
//        
//        
////        CGFloat square = MIN(height, width);
////        
////        CGFloat difference;
////        
////        if (height > width)
////            difference = height - width;
////        
////        else
////            difference = width - height;
////        
////        CGFloat y_position = difference / 2;
////        
////        
////        CGRect rect = CGRectMake(0, y_position, square, square);
//       
//        CGFloat square_length = MIN(height, width);
//        
//        CGFloat difference;
//        CGFloat x_position;
//        CGFloat y_position;
//        
//        if (height > width){
//            difference = height - width;
//            x_position = 0;
//            y_position = difference / 2;
//        }
//        else{
//            difference = width - height;
//            x_position = difference / 2;
//            y_position = 0;
//        }
//        
//        CGRect rect = CGRectMake(x_position, y_position, square_length, square_length);
//        
//        
//        CGImageRef imageRef = CGImageCreateWithImageInRect(image.CGImage, rect);
//        UIImage *squareImage = [UIImage imageWithCGImage:imageRef];
//        CGImageRelease(imageRef);
//        
//        // Create and show the new image from bitmap data
//        //  UIImageView *squareImageView = [[UIImageView alloc] initWithImage:squareImage];
//        
//        
//        
//        
//        
//        
//        
//        
//        //upload to dynamodb and s3
//        NSData *small_data = UIImageJPEGRepresentation(squareImage, 0.4);
//        
//        //upload to s3 only
//        NSData *medium_data = UIImageJPEGRepresentation(squareImage, 0.6);
//        
//        //upload to s3 only
//        NSData *large_data = UIImageJPEGRepresentation(squareImage, 1.0);
//       
//        
//        
//        
////        NSString *largePhotoAsString = [self encodeToBase64String:large_data];
//        
//        
//        
//        
//        
//        
//        
//        NSString *small_key = [NSString stringWithFormat:@"%@/%@/%@", self.username, PROFILE_IMAGES, SMALL_IMAGE];
//        NSString *medium_key = [NSString stringWithFormat:@"%@/%@/%@", self.username, PROFILE_IMAGES, MEDIUM_IMAGE];
//        NSString *large_key = [NSString stringWithFormat:@"%@/%@/%@", self.username, PROFILE_IMAGES, LARGE_IMAGE];
//
//        
//        BOOL smallUpload = [self uploadData:small_data toBucket:BUCKET_NAME withKeyName:small_key];
//        if (smallUpload)
//            NSLog(@"smallupload success");
//        else
//            NSLog(@"smallupload failed");
//
//        
//        BOOL mediumUpload = [self uploadData:medium_data toBucket:BUCKET_NAME withKeyName:medium_key];
//        if (mediumUpload)
//            NSLog(@"mediumUpload success");
//        else
//            NSLog(@"mediumUpload failed");
//        
//
//        BOOL largeUpload = [self uploadData:large_data toBucket:BUCKET_NAME withKeyName:large_key];
//        if (largeUpload)
//            NSLog(@"largeUpload success");
//        else
//            NSLog(@"largeUpload failed");
//
//        
////        //SET DATA ATTRIBUTE VALUE
////        DynamoDBAttributeValue *attributeValue = [[DynamoDBAttributeValue alloc] initWithB:small_data];
////        
////        DynamoDBAttributeValueUpdate *imageAttributeValueUpdate =
////            [[DynamoDBAttributeValueUpdate alloc] initWithValue:attributeValue
////                                                      andAction:@"PUT"];
////        
////        //SET THE TYPE OF DATA ATTRIBUTE VALUE
////        DynamoDBAttributeValue *typeAttributeValue = [[DynamoDBAttributeValue alloc] initWithS:IMAGE];
////        
////        DynamoDBAttributeValueUpdate *typeAttributeValueUpdate =
////            [[DynamoDBAttributeValueUpdate alloc] initWithValue:typeAttributeValue
////                                                      andAction:@"PUT"];
////        
////        
////        
////        NSMutableDictionary *dictionary = [NSMutableDictionary dictionaryWithCapacity:2];
////        dictionary[DATA]     = imageAttributeValueUpdate;
////        dictionary[DATATYPE] = typeAttributeValueUpdate;
////        
////        
////        updateItemRequest.tableName = QPUSERS_SEARCH_TABLE;
////        updateItemRequest.attributeUpdates = dictionary;
////        updateItemRequest.key = key;
////        
////        [[QPNetworkActivity sharedInstance] increaseActivity];
////        DynamoDBUpdateItemResponse *updateItemResponse = [[AmazonClientManager ddb] updateItem:updateItemRequest];
////        [[QPNetworkActivity sharedInstance] decreaseActivity];
////
////        if (!updateItemResponse.error)
////        {
////            NSDictionary * userInfo = @{USERNAME: self.username, DATA:small_data, ACTION:InsertImage};
////            
////            dispatch_sync(dispatch_get_main_queue(), ^{
////                
////                if (self.managedObjectContext)
////                {
////                    [self.managedObjectContext performBlockAndWait:^{
////                        [User updateUserinfo:userInfo inManagedObjectContext:self.managedObjectContext];
////                    }];
////                }
////            });
////        }
////        
//        NSLog(@"Decrease activity");
//        [self.hud hideProgressHUD];
//        
//    NSLog(@"Save image in core data and upload to dynamodb with update attribute for user-search");
//        
//    });
//}
//
//- (NSString *)encodeToBase64String:(NSData *)data
//{
//    return [data base64EncodedStringWithOptions:NSDataBase64Encoding64CharacterLineLength];
//}
//
//




//  If we're using standard display, get twice the size of the image
//if ([QPProfileMethods iphoneHasRetinaDisplay])
//{
//    compressionAmount = 0.3;
//}

//
//
///* Upload data in one part */
//-(BOOL)uploadData:(NSData *)data toBucket:(NSString *)bucket withKeyName:(NSString *)key
//{
//    BOOL success = NO;
//
//    S3PutObjectRequest *por = [[S3PutObjectRequest alloc] initWithKey:key
//                                                             inBucket:bucket];
//    if (USE_SERVER_SIDE_ENCRYPTION){
////        por.serverSideEncryption = kS3ServerSideEnryptionAES256;
//    }
//
//    por.contentType   = @"image/jpeg";
//    por.data          = data;
////    por.delegate = self;
//    
//    [[QPNetworkActivity sharedInstance] increaseActivity];
//    S3PutObjectResponse *putObjectResponse = [[AmazonClientManager s3] putObject:por];
//    [[QPNetworkActivity sharedInstance] decreaseActivity];
//
//    if(putObjectResponse.error)
//    {
//        NSLog(@"putObjectResponse error");
//        success = NO;
//    }
//    else
//    {
//        NSLog(@"putObjectResponse no error");
//        success = YES;
//    }
//    
//    return success;
//}
//


//
//
//
//-(void)sendReqestToKwikcyServer:(NSString *)photo
//{
//    
//    NSMutableDictionary *parameters = [NSMutableDictionary new];
//    
//    parameters[COMMAND] = UPDATE_PROFILE_PHOTO;
//    parameters[IMAGE]   = photo;
//    
//    
//    [KwikcyClientManager sendRequestWithParameters:parameters
//                             withCompletionHandler:^(BOOL received200Response, Response *response, NSError *error)
//     {
//         if (error)
//         {
//             [[Constants alertWithTitle:@"Connection Error"
//                             andMessage:@"Could not send request due to an internet connection error"] show];
//         }
//         else
//         {
//             KCServerResponse *serverResponse = (KCServerResponse *)response;
//             
//             NSLog(@"%@", serverResponse);
//             
//             if (received200Response)
//             {
//                 if (serverResponse.successful)
//                 {
//                     NSLog(@"serverResponse.successful!");
//                     //Update core data?
//                 }
//                 else
//                 {
//                     NSLog(@"serverResponse was unsuccessful!");
//                     //Update core data with message "Could not deliver photo"
//                     
//                     [[Constants alertWithTitle:@"Error" andMessage:serverResponse.message] show];
//                 }
//             }
//             
//         }
//     }];
//}








@end
